"use client";

import React, { useTransition,  } from "react";
import { motion, AnimatePresence } from "framer-motion";
import Image from "next/image";
import { selectImage } from "@/lib/actions/selectBottle";

interface ImageSliderProps {
  images: { src: string; alt: string }[];
}

export default function ImageSlider({ images }: ImageSliderProps) {
  const [current, setCurrent] = React.useState(0);
  const [isPending, startTransition] = useTransition();

  const nextSlide = () => setCurrent((prev) => (prev + 1) % images.length);
  const prevSlide = () => setCurrent((prev) => (prev - 1 + images.length) % images.length);

  const handleSelect = () => {
    startTransition(async () => {
      await selectImage(images[current].src);
    });
  };

  return (
    <div className="w-full max-w-xl mx-auto relative flex flex-col items-center">
      {/* Image container */}
      <div className="relative w-full h-72 overflow-hidden rounded-2xl shadow-lg">
        <AnimatePresence mode="wait">
          <motion.div
            key={current}
            initial={{ opacity: 0, x: 100 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -100 }}
            transition={{ duration: 0.5 }}
            className="absolute inset-0 flex items-center justify-center"
          >
            <Image
              src={images[current].src}
              alt={images[current].alt}
              fill
              className="object-cover"
            />
          </motion.div>
        </AnimatePresence>
      </div>

      {/* Navigation */}
      <div className="flex justify-between w-full mt-4 px-4">
        <button
          onClick={prevSlide}
          className="px-4 py-2 rounded-xl bg-gray-200 hover:bg-gray-300 transition"
        >
          ◀ Prev
        </button>
        <button
          onClick={nextSlide}
          className="px-4 py-2 rounded-xl bg-gray-200 hover:bg-gray-300 transition"
        >
          Next ▶
        </button>
      </div>

      {/* Select Button */}
      <button
        onClick={handleSelect}
        disabled={isPending}
        className={`mt-4 px-6 py-2 rounded-xl transition shadow-lg ${
          isPending ? "bg-gray-400" : "bg-blue-600 hover:bg-blue-700 text-white"
        }`}
      >
        {isPending ? "Saving..." : "Select"}
      </button>
    </div>
  );
}
